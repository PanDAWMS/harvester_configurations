# THIS FILE IS AUTOMATICALLY DISTRIBUTED BY PUPPET.  ANY CHANGES MAY BE OVERWRITTEN
## Please make changes in https://github.com/PanDAWMS/harvester_configurations/tree/master/GRID/schedd_node_configs

CONDOR_HOST = $(FULL_HOSTNAME)
COLLECTOR_HOST = $(CONDOR_HOST):19618

UID_DOMAIN = cern.ch

DAEMON_LIST = MASTER, SCHEDD, COLLECTOR, NEGOTIATOR

LOWPORT = 26000
HIGHPORT = 39999


USE_SHARED_PORT = FALSE

#MASTER_DEBUG = D_FULLDEBUG, D_SECURITY
#NEGOTIATOR_DEBUG = D_FULLDEBUG
#COLLECTOR_DEBUG = D_FULLDEBUG, D_SECURITY
#SCHEDD_DEBUG = D_FULLDEBUG D_SECURITY
#SCHEDD_DEBUG = $(SCHEDD_DEBUG) D_FULLDEBUG D_COMMAND

#NEGOTIATOR_INFORM_STARTD = False

MAX_HISTORY_LOG = 50M
HISTORY_HELPER_MAX_CONCURRENCY = 50
#HISTORY_HELPER_MAX_HISTORY = 0

IN_LOWPORT = 26000
IN_HIGHPORT = 39999

#JOB_IS_FINISHED_INTERVAL = 0
JOB_IS_FINISHED_COUNT = 100
JOB_TRANSFORM_NAMES = $(JOB_TRANSFORM_NAMES) LeaveInQueue AddSDFCopied

JOB_TRANSFORM_LeaveInQueue @=end
[
    copy_LeaveJobInQueue = "SubmitterLeaveJobInQueue";
    set_LeaveJobInQueue = ((time() - EnteredCurrentStatus) < 1800) || SubmitterLeaveJobInQueue;
]
@end

JOB_TRANSFORM_AddSDFCopied @=end
[
    set_sdfCopied = 0;
]
@end

# wrapper to override LD_LIBRARY_PATH
#CREAM_GAHP = /usr/local/bin/cream_gahp_wrap.sh
#NORDUGRID_GAHP = /usr/local/bin/nordugrid_gahp_wrap.sh
ARC_GAHP = /usr/local/bin/arc_gahp_wrap.sh


#GRIDMANAGER_MAX_SUBMITTED_JOBS_PER_RESOURCE = 3000
GRIDMANAGER_DEBUG = D_FULLDEBUG

GRIDMANAGER_MAX_SUBMITTED_JOBS_PER_RESOURCE = 20000
GRIDMANAGER_GAHP_CALL_TIMEOUT = 3600
## Jaime says <50
GRIDMANAGER_MAX_PENDING_REQUESTS = 24
CREAM_GAHP_WORKER_THREADS = 12
#GRIDMANAGER_SELECTION_EXPR = MATCH_APF_QUEUE
#GRIDMANAGER_SELECTION_EXPR = regexps("([^ ]*) .*",GridResource,"\1")
GRIDMANAGER_SELECTION_EXPR = GridResource
MAX_GRIDMANAGER_LOG = 1Gb
#MAX_NUM_GRIDMANAGER_LOG = 10
GRIDMANAGER_JOB_PROBE_INTERVAL = 300
GRIDMANAGER_GAHP_RESPONSE_TIMEOUT = 300


GSI_DAEMON_DIRECTORY = /etc/grid-security
GSI_DAEMON_CERT           = $(GSI_DAEMON_DIRECTORY)/hostcert.pem
GSI_DAEMON_KEY            = $(GSI_DAEMON_DIRECTORY)/hostkey.pem
GSI_DAEMON_TRUSTED_CA_DIR = $(GSI_DAEMON_DIRECTORY)/certificates


CONDOR_GAHP=$(SBIN)/condor_c-gahp
C_GAHP_LOG=/tmp/CGAHPLog.$(USERNAME)
C_GAHP_WORKER_THREAD_LOG=/tmp/CGAHPWorkerLog.$(USERNAME)
#MAX_C_GAHP_LOG = 1Gb
#MAX_C_GAHP_WORKER_THREAD_LOG = 1Gb


GLITE_LOCATION = $(LIB)/glite
BATCH_GAHP     = $(GLITE_LOCATION)/bin/batch_gahp


#AUTH_SSL_SERVER_CADIR = /etc/grid-security/certificates
#AUTH_SSL_SERVER_CAFILE = /etc/pki/tls/certs/CERN-bundle.pem
#AUTH_SSL_SERVER_CERTFILE = /etc/grid-security/hostcert.pem
#AUTH_SSL_SERVER_KEYFILE = /etc/grid-security/hostkey.pem

AUTH_SSL_CLIENT_CADIR = /etc/grid-security/certificates
AUTH_SSL_CLIENT_CERTFILE = /etc/grid-security/hostcert.pem
AUTH_SSL_CLIENT_KEYFILE = /etc/grid-security/hostkey.pem

AUTH_SSL_ALLOW_CLIENT_PROXY = True

#CERTIFICATE_MAPFILE = $(LOCK)/cert_mapfile

#SEC_DEFAULT_AUTHENTICATION = REQUIRED
SEC_DEFAULT_AUTHENTICATION = OPTIONAL
SEC_DEFAULT_INTEGRITY = REQUIRED
SEC_DEFAULT_AUTHENTICATION_METHODS = CLAIMTOBE, FS, SSL
#SEC_CLIENT_AUTHENTICATION_METHODS = PASSWORD, GSI, FS
SEC_CLIENT_AUTHENTICATION_METHODS = SSL, FS, SCITOKENS
ALLOW_READ = */*, */*.cern.ch
ALLOW_WRITE = $(FULL_HOSTNAME), atlpan/aipanda081.cern.ch, atlpan/aipanda083.cern.ch, atlpan/aipanda170.cern.ch, atlpan/aipanda171.cern.ch, atlpan/aipanda172.cern.ch, atlpan/aipanda173.cern.ch, atlpan/aipanda174.cern.ch, atlpan/aipanda175.cern.ch
#ALLOW_DAEMON = condor_pool@$(UID_DOMAIN)/*.cern.ch
ALLOW_DAEMON = *@$(UID_DOMAIN)/*.cern.ch
#ALLOW_NEGOTIATOR = condor_pool@$(UID_DOMAIN)/*.cern.ch
ALLOW_NEGOTIATOR = *@$(UID_DOMAIN)/*.cern.ch


JOB_SPOOL_PERMISSIONS = world

NEGOTIATOR_CONSIDER_PREEMPTION = false

#DELEGATE_JOB_GSI_CREDENTIALS_LIFETIME = 0
DELEGATE_JOB_GSI_CREDENTIALS = false

# Macros and Remove resaons
J_Active = member(JobStatus, {1,2,5,6,7})
#RR_JobRestarted = ( ((NumJobStarts >= 1 || JobRunCount >= 1) && JobStatus == 1) || ((NumJobStarts > 1 || JobRunCount > 1) && JobStatus == 2) )
#RR_JobRestarted = ( (NumJobStarts >= 1 && JobStatus == 1) || (NumJobStarts > 1 && JobStatus == 2) )
RR_JobRestarted = (LastRemoteStatusUpdate > EnteredCurrentStatus) && !isUndefined(JobRunCount) && ( (NumJobStarts >= 1 && JobStatus == 1) || (NumJobStarts > 1 && JobStatus == 2) )
#RR_JobMultipleJobRunCount = ( (JobRunCount >= 1 && JobStatus == 1) || (JobRunCount > 1 && JobStatus == 2) )
RR_JobMultipleJobRunCount = false
RR_JobHeldTooLong = ( JobStatus == 5 && time() - EnteredCurrentStatus > 3600*4 )
RR_ActiveJobStatusStuckTooLong = ( time() - EnteredCurrentStatus > 3600*24*7 )
RR_ActiveJobInQueueTooLong = ( time() - QDate > 3600*24*15 )
RR_ActiveJobRemoteStatusStuckTooLong = ( LastRemoteStatusUpdate > 0 && time() - LastRemoteStatusUpdate > 3600*4 )

SYSTEM_PERIODIC_HOLD = false

SYSTEM_PERIODIC_REMOVE = $(RR_JobRestarted)        || \
                         $(RR_JobMultipleJobRunCount)      || \
                         $(RR_JobHeldTooLong)      || \
                         ( $(J_Active) && (           \
                             $(RR_ActiveJobStatusStuckTooLong)         || \
                             $(RR_ActiveJobInQueueTooLong)             || \
                             $(RR_ActiveJobRemoteStatusStuckTooLong)      \
                         ) )

SYSTEM_PERIODIC_REMOVE_REASON = strcat("removed by SYSTEM_PERIODIC_REMOVE due to ", \
    ifThenElse($(RR_JobRestarted), "job restarted undesirably. ", \
    ifThenElse($(RR_JobMultipleJobRunCount), "job JobRunCount > 1 (testing condition). ", \
    ifThenElse($(RR_JobHeldTooLong), "job held time exceeded (3600*4).", \
    ifThenElse($(RR_ActiveJobStatusStuckTooLong), "job status unchanged time exceeded (3600*24*7).", \
    ifThenElse($(RR_ActiveJobInQueueTooLong), "job staying in queue time exceeded (3600*24*15).", \
    ifThenElse($(RR_ActiveJobRemoteStatusStuckTooLong), "job remote status outdated time exceeded (3600*4).", \
        "Remove Reason unknown." \
    )))))))
